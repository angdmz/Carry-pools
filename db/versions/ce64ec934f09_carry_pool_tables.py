"""empty message

Revision ID: ce64ec934f09
Revises: 2a526b49bde3
Create Date: 2023-11-04 01:03:04.361758

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ce64ec934f09'
down_revision = '2a526b49bde3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('carry_pools',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('basis_points', sa.DECIMAL(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ethereum_accounts',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('public_key', sa.String(), nullable=False),
    sa.Column('balance', sa.Numeric(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('public_key', name='public_key_uc')
    )
    op.create_table('funds',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('milestones',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('account_controllers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('address_id', sa.UUID(), nullable=False),
    sa.Column('participant_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['ethereum_accounts.id'], ),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address_id', 'participant_id', name='address_id_participant_id_uc')
    )
    op.create_table('balance_limits',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('address_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['ethereum_accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address_id', name='address_id_uc')
    )
    op.create_table('deals',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('fund_id', sa.UUID(), nullable=False),
    sa.Column('capital_deployed', sa.DECIMAL(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['fund_id'], ['funds.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fund_carry_plans',
    sa.Column('fund_id', sa.UUID(), nullable=False),
    sa.Column('carry_pool_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['carry_pool_id'], ['carry_pools.id'], ),
    sa.ForeignKeyConstraint(['fund_id'], ['funds.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('fund_id', 'carry_pool_id', name='fund_id_carry_pool_id_uc')
    )
    op.create_table('recharges',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('address_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['ethereum_accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('account_controllers_status',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('status', sa.Enum('VERIFIED', 'UNVERIFIED', 'TO_REVERIFIED', 'REJECTED', name='enum_account_controller_status'), nullable=False),
    sa.Column('account_controller_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['account_controller_id'], ['account_controllers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_controller_id', 'status', 'created_at', name='account_controller_id_status_created_at_uc')
    )
    op.create_table('recharge_statuses',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('recharge_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('REJECTED', 'SATISFIED', 'WAITING', name='enum_recharge_status_type'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['recharge_id'], ['recharges.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('recharge_id', 'status', 'created_at', name='recharge_id_status_created_at_uc')
    )
    op.add_column('academics', sa.Column('education_level', sa.Enum('SCHOOL', 'HIGHSCHOOL', 'UNIVERSITY', name='enum_academic_type'), nullable=False))
    op.add_column('academics', sa.Column('participant_id', sa.UUID(), nullable=False))
    op.create_foreign_key(None, 'academics', 'participants', ['participant_id'], ['id'])
    op.drop_column('academics', 'type')
    op.add_column('companies', sa.Column('participant_id', sa.UUID(), nullable=False))
    op.create_foreign_key(None, 'companies', 'participants', ['participant_id'], ['id'])
    op.add_column('government_organisms', sa.Column('participant_id', sa.UUID(), nullable=False))
    op.create_foreign_key(None, 'government_organisms', 'participants', ['participant_id'], ['id'])
    op.add_column('identifications', sa.Column('person_id', sa.UUID(), nullable=False))
    op.alter_column('identifications', 'type',
               existing_type=postgresql.ENUM('DNI', 'CUIT', 'LE', name='enum_identification_type'),
               nullable=False)
    op.drop_constraint('identifications_a_id_fkey', 'identifications', type_='foreignkey')
    op.create_foreign_key(None, 'identifications', 'natural_persons', ['person_id'], ['id'])
    op.drop_column('identifications', 'a_id')
    op.add_column('natural_persons', sa.Column('participant_id', sa.UUID(), nullable=False))
    op.drop_constraint('natural_persons_person_id_fkey', 'natural_persons', type_='foreignkey')
    op.create_foreign_key(None, 'natural_persons', 'participants', ['participant_id'], ['id'])
    op.drop_column('natural_persons', 'person_id')
    op.add_column('participants', sa.Column('type', sa.Enum('NATURAL_PERSON', 'GOVERNMENT_ORGANISM', 'COMPANY', 'ACADEMIC', name='enum_participant_type'), nullable=False))
    op.alter_column('participants', 'date_of_verification',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('participants', 'date_of_verification',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.drop_column('participants', 'type')
    op.add_column('natural_persons', sa.Column('person_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'natural_persons', type_='foreignkey')
    op.create_foreign_key('natural_persons_person_id_fkey', 'natural_persons', 'natural_persons', ['person_id'], ['id'])
    op.drop_column('natural_persons', 'participant_id')
    op.add_column('identifications', sa.Column('a_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'identifications', type_='foreignkey')
    op.create_foreign_key('identifications_a_id_fkey', 'identifications', 'natural_persons', ['a_id'], ['id'])
    op.alter_column('identifications', 'type',
               existing_type=postgresql.ENUM('DNI', 'CUIT', 'LE', name='enum_identification_type'),
               nullable=True)
    op.drop_column('identifications', 'person_id')
    op.drop_constraint(None, 'government_organisms', type_='foreignkey')
    op.drop_column('government_organisms', 'participant_id')
    op.drop_constraint(None, 'companies', type_='foreignkey')
    op.drop_column('companies', 'participant_id')
    op.add_column('academics', sa.Column('type', postgresql.ENUM('SCHOOL', 'HIGHSCHOOL', 'UNIVERSITY', name='enum_academic_type'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'academics', type_='foreignkey')
    op.drop_column('academics', 'participant_id')
    op.drop_column('academics', 'education_level')
    op.drop_table('recharge_statuses')
    op.drop_table('account_controllers_status')
    op.drop_table('recharges')
    op.drop_table('fund_carry_plans')
    op.drop_table('deals')
    op.drop_table('balance_limits')
    op.drop_table('account_controllers')
    op.drop_table('milestones')
    op.drop_table('funds')
    op.drop_table('ethereum_accounts')
    op.drop_table('carry_pools')
    # ### end Alembic commands ###
